# Lead Generation AI Assistant Project Specification

## Project Overview
A reference implementation for an AI-powered lead generation and nurturing system using Twilio products. The system enables businesses to capture leads through a web form, automatically generate personalized outbound emails, and engage in AI-driven email conversations with prospects.

## Core Features

### 1. Lead Capture Frontend
- Lead information form with fields:
  - Name (First/Last)
  - Email
  - Phone (optional)
  - Company
  - Interest/Notes
- Admin panel showing:
  - Lead list view
  - Email conversation history
  - Lead status tracking
- Modern React-based UI with Tailwind CSS

### 2. Email Communication System
- SendGrid integration for:
  - Outbound email sending
  - Inbound email parsing via webhooks
- Content-Type Converter service for:
  - Converting SendGrid's multipart/form-data to application/json
  - Proxying requests to Twilio Functions
- AI Assistant integration for:
  - Initial outreach email generation
  - Follow-up email response generation
  - Email conversation context maintenance

### 3. Backend Services
- Content-Type Converter Service:
  - Simple Node.js/Fastify server
  - Converts webhook content types
  - Proxies requests to Twilio Functions
- Twilio Functions for:
  - SendGrid webhook handling (via converter)
  - AI Assistant interaction
  - Lead data management
- Database integration for:
  - Lead information storage
  - Email conversation history
  - System configuration

## Technical Architecture

### Component Interaction Flow
1. Lead submits information through web form
2. System creates lead record
3. AI Assistant generates personalized initial email
4. SendGrid sends email to lead
5. Lead replies to email
6. SendGrid webhook sends multipart/form-data to Content-Type Converter
7. Converter transforms request to application/json
8. Converter forwards request to Twilio Function
9. AI Assistant generates appropriate response
10. Process continues for follow-up communications

## Technical Requirements

### Content-Type Converter Requirements
- Node.js 18+
- Fastify framework
- @fastify/multipart plugin
- axios for forwarding requests
- Basic error handling
- Logging

### Frontend Requirements
- React 18+
- Twilio Paste Components for UI
- Theme Provider integration
- State management (Redux/Context)
- Responsive design
- Modern browser support
- Paste component setup:
  - Form components from @twilio-paste/core
  - Design tokens for consistency
  - Responsive layouts using Paste Box/Stack
  - Toast notifications for user feedback
  - Loading states and error handling

### Backend Requirements
- Node.js 18+
- Twilio Functions runtime
- SendGrid API v3
- Twilio AI Assistant API
- Database (suggest Airtable for easy setup)

### Integration Requirements
- SendGrid Email API
- SendGrid Inbound Parse Webhook
- Twilio AI Assistant
- Twilio Functions
- Airtable API

## Environment Variables
```
# Twilio Credentials
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_ASSISTANT_SID=

# SendGrid Credentials
SENDGRID_API_KEY=
SENDGRID_WEBHOOK_SECRET=

# Airtable Configuration
AIRTABLE_API_KEY=
AIRTABLE_BASE_ID=

# Content-Type Converter Configuration
FORWARD_TO=https://your-twilio-function-domain.twil.io
PORT=3000

# Application Settings
APP_URL=
WEBHOOK_URL=
```

## Setup Instructions

### Prerequisites
1. Twilio account with AI Assistant access
2. SendGrid account
3. Airtable account
4. Node.js 18+ installed locally
5. ngrok installed locally (for webhook testing)

### Local Development Setup

1. Clone and setup main project:
```bash
# Clone repository
git clone https://github.com/twilio-samples/lead-gen-ai-assistant.git
cd lead-gen-ai-assistant

# Install dependencies for main project
npm install

# Install Paste dependencies
npm install @twilio-paste/core @twilio-paste/icons
npm install @twilio-paste/theme @twilio-paste/design-tokens

# Configure environment
cp .env.example .env
# Edit .env with your credentials
```

2. Setup converter service:
```bash
# Setup converter
cd converter
npm init -y
npm install fastify @fastify/multipart axios

# Start converter
FORWARD_TO=https://your-twilio-function-domain.twil.io node server.js
```

3. Start development server:
```bash
npm run dev
```

### SendGrid Configuration
1. Create API key with necessary permissions
2. Configure inbound parse webhook to point to converter service
3. Set up email sending domain
4. Configure tracking settings

### AI Assistant Configuration
1. Create new assistant instance
2. Upload personality prompt
3. Configure webhook endpoints through converter
4. Test assistant responses

## Security Considerations
- SendGrid webhook validation
- API key management
- CORS configuration
- Input validation
- Rate limiting
- Data encryption
- Basic server hardening

## Testing Strategy
- Unit tests for functions and converter
- Integration tests for API endpoints
- E2E tests for critical flows
- Load testing for webhook handling

## Monitoring and Maintenance
- Error logging
- Performance monitoring
- Email delivery tracking
- Conversation quality assessment
- Server health monitoring

## Documentation Requirements
- Setup guide
- API documentation
- Environment configuration
- Troubleshooting guide
- Security guidelines

## Deployment Options

### Converter Service
1. Basic VPS (DigitalOcean, Linode, etc.)
2. Platform as a Service (Heroku, Render, Railway)
3. Serverless (Vercel, Netlify)

### Frontend
1. Static hosting (Netlify, Vercel, GitHub Pages)
2. Traditional hosting platforms

### Paste Components Implementation

#### Lead Form
- Form container using `<Form>`
- Input fields:
  - `<Input>` for text fields
  - `<Select>` for dropdowns
  - `<TextArea>` for notes
- Validation using `<Label>` and `<HelpText>`
- Submit button using `<Button>`
- Loading states with `<Spinner>`
- Success/Error notifications with `<Toast>`

#### Admin Panel
- Layout using `<Box>` and `<Stack>`
- Data tables using `<Table>`
- Filters using `<Select>` and `<SearchInput>`
- Status indicators using `<Badge>`
- Action buttons using `<Button>` and `<ButtonGroup>`
- Modals using `<Modal>` for detailed views
- Pagination using `<Pagination>`
- Cards using `<Card>` for summary views

#### Theme Setup
```typescript
// theme/index.ts
import { Theme } from '@twilio-paste/theme';
import { CustomizationProvider } from '@twilio-paste/core';

export const AppThemeProvider: React.FC = ({ children }) => (
  <Theme.Provider theme="default">
    <CustomizationProvider baseTheme="default">
      {children}
    </CustomizationProvider>
  </Theme.Provider>
);
```

## Additional Resources
- Twilio AI Assistant documentation
- SendGrid API documentation
- Example configurations
- Testing guidelines

## Success Criteria
1. Quick deployment (under 30 minutes)
2. Reliable email handling
3. Natural AI conversations
4. Scalable architecture
5. Comprehensive documentation